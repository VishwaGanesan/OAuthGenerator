{"version":3,"sources":["InputForm.js","ResultDialog.js","App.js","serviceWorker.js","index.js"],"names":["InputCardComponent","props","state","generateAccessToken","bind","request","this","domainURL","clientID","scope","redirectURI","window","open","textFieldStyle","margin","width","className","Card","variant","CardContent","style","minWidth","noValidate","autoComplete","TextField","id","select","label","value","onChange","e","setState","target","map","option","MenuItem","key","Button","fontSize","onClick","size","color","Component","ResultDialogComponents","accessToken","accesstoken","handleClickOpen","handleClose","copyToClipboard","copy","currentComponent","alterDialog","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","to","RouteComponents","URLSearchParams","useLocation","hash","get","homeComponent","ResultDialog","App","basename","process","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b971ffb2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nclass InputCardComponent extends Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            'domainURL':'',\n            'clientID':'',\n            'scope':'',\n            'redirectURI':''\n        };\n        this.generateAccessToken = this.generateAccessToken.bind(this)\n    }\n\n    generateAccessToken()\n    {\n        const domain = this.state.domainURL;\n        const clientID = this.state.clientID;\n        const scope = this.state.scope;\n        const redirectURI = this.state.redirectURI;\n\n        const request = domain + \"/oauth/v2/auth?client_id=\"+clientID+\"&response_type=token&scope=\"+scope+\"&redirect_uri=\"+redirectURI;\n\n        window.open(request);\n\n    }\n\n    render()\n    {\n        const domains = [\n            {\n                value: 'https://accounts.zoho.com',\n                label: 'https://accounts.zoho.com',\n            },\n            {\n                value: 'https://accounts.localzoho.com',\n                label: 'https://accounts.localzoho.com',\n            },\n            {\n                value: 'https://accounts.csez.zohocorpin.com',\n                label: 'https://accounts.csez.zohocorpin.com',\n            },\n        ];\n        const rootStyle = {\n            minWidth:275\n        };\n\n        const textFieldStyle = {\n            margin:'3vmin',\n            width: '35ch'\n        };\n\n        const buttonStyle = {\n            fontSize:'2vmin'\n        };\n\n        return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Card variant=\"elevation\">\n                     <CardContent style={rootStyle}>\n                            <form  noValidate autoComplete=\"off\">\n                                <TextField\n                                    id=\"domain-url\"\n                                    select\n                                    label=\"Domain URl\"\n                                    value = {this.state.domainURL}\n                                    onChange={e => this.setState({ domainURL : e.target.value })}\n                                    style={textFieldStyle}\n                                >\n                                    {domains.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                                <div/>\n                                <TextField\n                                    id=\"client-id\"\n                                    label=\"Client ID\"\n                                    onChange={e => this.setState({ clientID : e.target.value })}\n                                    style={textFieldStyle}\n                                />\n                                <div/>\n                                <TextField\n                                    id=\"service-scope\"\n                                    label=\"Service Scope\"\n                                    onChange={e => this.setState({ scope : e.target.value })}\n                                    style={textFieldStyle}\n                                />\n                                <div />\n                                <TextField\n                                    id=\"redirect-uri\"\n                                    label=\"Redirect URI\"\n                                    onChange={e => this.setState({ redirectURI : e.target.value })}\n                                    style={textFieldStyle}\n                                />\n                            </form>\n                            <Button style={buttonStyle} onClick={this.generateAccessToken} size=\"small\" variant=\"contained\" color=\"primary\">Generate Access token</Button>\n                        </CardContent>\n                </Card>\n            </header>\n        </div>\n        );\n    }\n}\nexport default InputCardComponent;\n\n\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Redirect } from \"react-router-dom\";\nimport copy from \"copy-to-clipboard\";\n\n\nclass ResultDialogComponents extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            open : true,\n            accessToken :this.props.accesstoken\n        };\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n\n    }\n\n    handleClickOpen ()\n    {\n        this.setState({\n            open:true\n        });\n    };\n\n    handleClose ()\n    {\n        this.setState({\n            open:false\n        });\n    };\n\n    copyToClipboard () {\n        copy(this.state.accessToken);\n        this.setState(\n            {open:false\n            });\n    };\n\n    render()\n    {\n        let currentComponent;\n\n        const alterDialog = < Dialog\n                            open={this.state.open}\n                            onClose={this.handleClose}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n                            <DialogTitle id=\"alert-dialog-title\">{\"Generated Access token\"}</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">\n                                    {this.state.accessToken}\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={this.handleClose} variant=\"contained\" color=\"primary\">\n                                    Close\n                                </Button>\n                                <Button onClick={this.copyToClipboard} variant=\"contained\" color=\"primary\">\n                                    Copy\n                                </Button>\n                            </DialogActions>\n                        </Dialog>;\n\n\n        //Redirect component from react-route-dom to redirect to home\n        currentComponent =  this.state.open ? alterDialog : <Redirect to=\"/\"/>;\n\n        return (\n           <div>\n               {currentComponent}\n           </div>\n        );\n    }\n}\n\nexport default ResultDialogComponents;","import React from 'react';\nimport './App.css';\nimport InputCardComponent from \"./InputForm\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport {useLocation} from \"react-router\";\nimport ResultDialogComponents from \"./ResultDialog\";\n\n\nfunction App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n                <Route exact path=\"/\" component={RouteComponents} />\n        </Router>\n    );\n}\n\n\n//to fetch the query param\nfunction useQuery() {\n    /**\n     * useLocation.hash used for #& as starting\n     * useLocation.search used for ? as starting\n     */\n    return new URLSearchParams(useLocation().hash);\n}\n\n\n//To route the components based on query params\nfunction RouteComponents() {\n    let queryParams = useQuery();\n    let accessToken = queryParams.get(\"access_token\");\n    let homeComponent = < InputCardComponent />;\n    if(accessToken != null)\n    {\n        homeComponent = <ResultDialogComponents accesstoken={accessToken}/>\n    }\n    return (\n        homeComponent\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}