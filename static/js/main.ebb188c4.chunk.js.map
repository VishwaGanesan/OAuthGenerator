{"version":3,"sources":["CustomizedButton.js","InputForm.js","ResultDialog.js","App.js","serviceWorker.js","index.js"],"names":["CustomizedButton","ButtonWithStyle","withStyles","root","fontSize","color","border","fontFamily","backgroundColor","boxShadow","Button","variant","size","onClick","this","props","disableElevation","content","Component","domains","value","label","domainClientIDMap","Map","CssTextField","margin","width","borderBottomColor","borderColor","TextField","CssCardContent","minWidth","CardContent","InputCardComponent","state","generateAccessToken","bind","fieldName","domain","domainURL","scope","setState","errorMsg","openAlert","has","request","get","window","open","className","Card","Collapse","in","Alert","severity","action","IconButton","aria-label","noValidate","autoComplete","id","select","helperText","onChange","e","target","map","option","MenuItem","key","placeholder","ResultDialogComponents","accessToken","accesstoken","handleClickOpen","handleClose","copyToClipboard","copy","currentComponent","alterDialog","Dialog","onClose","fullWidth","aria-labelledby","aria-describedby","DialogContent","style","overflow","display","AlertTitle","DialogActions","to","RouteComponents","URLSearchParams","useLocation","hash","homeComponent","ResultDialog","App","basename","process","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebb188c4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\nclass CustomizedButton extends Component\n{\n    render()\n    {\n        const ButtonWithStyle = withStyles({\n            root: {\n                fontSize: 16,\n                color:'grey',\n                border: '1px solid rgba(253,199,141,1)',\n                fontFamily:'Impact, Charcoal, sans-serif',\n                '&:hover': {\n                    backgroundColor: 'rgba(253,199,141,1)',\n                    color:'white',\n                    boxShadow: 'none',\n                },\n                // '&:active': {\n                //     boxShadow: 'none',\n                //     backgroundColor: '#0062cc',\n                // },\n                '&:focus': {\n                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n                },\n            },\n        })(Button);\n\n        return (\n            <ButtonWithStyle  variant=\"outlined\" size=\"small\"  onClick={this.props.onClick} disableElevation> <strong>{this.props.content}</strong></ButtonWithStyle>\n       );\n    }\n}\n\nexport default CustomizedButton;","import React, {Component} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CustomizedButton from \"./CustomizedButton\";\n\nconst domains = [\n    {\n        value: 'https://accounts.zoho.com',\n        label: 'https://accounts.zoho.com',\n    },\n    {\n        value: 'https://accounts.localzoho.com',\n        label: 'https://accounts.localzoho.com',\n    },\n    {\n        value: 'https://accounts.csez.zohocorpin.com',\n        label: 'https://accounts.csez.zohocorpin.com',\n    },\n];\n\n//Map of client IDs and domains\nconst domainClientIDMap = new Map([\n\n    [\"https://accounts.zoho.com\"  , \"1000.WOY67PUCV4VKNTCBWKOGCO1V8UGV2P\" ],\n\n    [\"https://accounts.csez.zohocorpin.com\" , \"1000.DW6307BZMQ4W46247Z3F4ZPO8SIPFN\"],\n\n    [\"https://accounts.localzoho.com\" , \"1000.O98N6VT44BFXF49TWD6HTY631C02DZ\"]\n\n]);\n\nconst CssTextField = withStyles({\n    root: {\n        margin:'3vmin',\n        width: '35ch',\n        fontFamily:'font-family: Impact, Charcoal, sans-serif',\n        '& label.Mui-focused': {\n            color: 'rgba(253,199,141,1)',\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: 'rgba(253,199,141,1)',\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderColor: 'rgba(253,199,141,1)',\n            },\n            '&:hover fieldset': {\n                borderColor: 'rgba(253,199,141,1)',\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: 'rgba(253,199,141,1)',\n            },\n        },\n    },\n})(TextField);\n\nconst CssCardContent = withStyles({\n    root: {\n        minWidth:275,\n    }\n})(CardContent);\n\n//Switch redirect uri for testing purpose\nlet redirectURI = 'https://vishwaganesan.github.io/OAuthGenerator';\nif(process.env.NODE_ENV !== 'production')\n{\n    redirectURI = 'http://localhost:3000/OAuthGenerator';\n}\n\nclass InputCardComponent extends Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            'domainURL':'',\n            'clientID':'',\n            'scope':'',\n            'redirectURI':'',\n            'openAlert':false,\n            'errorMsg':''\n        };\n        this.generateAccessToken = this.generateAccessToken.bind(this)\n    }\n\n    generateAccessToken()\n    {\n        let clientID;\n        const domain = this.state.domainURL;\n        const scope = this.state.scope;\n        let fieldName;\n        if(domain === \"\")\n        {\n            fieldName = \"Domain url \";\n        }\n        if(scope === \"\")\n        {\n            if(!fieldName)\n            {\n                fieldName = \"Scope\";\n            }\n            else\n            {\n                fieldName = fieldName +\"& Scope\";\n            }\n        }\n        if(fieldName)\n        {\n            this.setState({errorMsg: \"Please select \" + fieldName+\".\",openAlert:true})\n            return;\n        }\n\n        if(!domainClientIDMap.has(domain))\n        {\n            this.setState({errorMsg: \"Please select valid domain.\",openAlert:true})\n            return;\n        }\n        else\n        {\n            clientID = domainClientIDMap.get(domain);\n        }\n        const request = domain + \"/oauth/v2/auth?client_id=\"+clientID+\"&response_type=token&scope=\"+scope+\"&redirect_uri=\"+redirectURI;\n\n        window.open(request);\n\n    }\n\n    render()\n    {\n        return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1 className=\"App-title\">\n                    OAuth Generator\n                </h1>\n                <Card variant=\"elevation\">\n                     <CssCardContent>\n                         <Collapse in={this.state.openAlert}>\n                             <Alert\n                                 severity=\"error\"\n                                 action={\n                                     <IconButton\n                                         aria-label=\"close\"\n                                         color=\"inherit\"\n                                         size=\"small\"\n                                         onClick={() => {\n                                             this.setState({openAlert:false})\n                                         }}\n                                     >\n                                         <CloseIcon fontSize=\"inherit\" />\n                                     </IconButton>\n                                 }\n                             >\n                                 {this.state.errorMsg}\n                             </Alert>\n                          </Collapse>\n                            <form  noValidate autoComplete=\"off\">\n                                <CssTextField\n                                    id=\"domain-url\"\n                                    select\n                                    label=\"Domain URl\"\n                                    value = {this.state.domainURL}\n                                    helperText=\"Domain for which access token need to be generated\"\n                                    variant=\"outlined\"\n                                    onChange={e => this.setState({ domainURL : e.target.value })}\n                                >\n                                    {domains.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </CssTextField>\n                                <div/>\n\n                                <CssTextField\n                                    id=\"service-scope\"\n                                    label=\"Service Scope\"\n                                    variant=\"outlined\"\n                                    placeholder=\"i.e ZohoSubscriptions.fullaccess.all\"\n                                    onChange={e => this.setState({ scope : e.target.value })}\n                                />\n                            </form>\n                            <CustomizedButton onClick={this.generateAccessToken.bind(this)} content=\"Generate Access token\"/>\n                        </CssCardContent>\n                </Card>\n            </header>\n        </div>\n        );\n    }\n}\nexport default InputCardComponent;\n\n\n","import React, {Component} from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {Redirect } from \"react-router-dom\";\nimport copy from \"copy-to-clipboard\";\nimport Alert from \"@material-ui/lab/Alert/Alert\";\nimport Collapse from \"@material-ui/core/Collapse/Collapse\";\nimport CustomizedButton from \"./CustomizedButton\";\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\n\nclass ResultDialogComponents extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            open : true,\n            accessToken :this.props.accesstoken\n        };\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n\n    }\n\n    handleClickOpen ()\n    {\n        this.setState({\n            open:true\n        });\n    };\n\n    handleClose ()\n    {\n        this.setState({\n            open:false\n        });\n    };\n\n    copyToClipboard () {\n        copy(this.state.accessToken);\n        this.setState(\n            {open:false\n            });\n    };\n\n    render()\n    {\n        let currentComponent;\n\n        const alterDialog = < Dialog\n                            open={this.state.open}\n                            onClose={this.handleClose}\n                            fullWidth=\"true\"\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n                            <DialogContent  style={{overflow:\"hidden\"}}>\n                                <Collapse style={{display:\"inline\"}} in={this.state.open}>\n                                    <Alert severity=\"success\">\n                                        <AlertTitle>Access Token generated successfully</AlertTitle>\n                                        <div className=\"Result-content\">\n                                         {this.state.accessToken}\n                                        </div>\n                                    </Alert>\n                                </Collapse>\n                            </DialogContent>\n                            <DialogActions>\n                                <CustomizedButton onClick={this.handleClose.bind(this)} content=\"Close\"/>\n                                <CustomizedButton onClick={this.copyToClipboard.bind(this)} content=\"Copy\" />\n                            </DialogActions>\n                        </Dialog>;\n\n\n        //Redirect component from react-route-dom to redirect to home\n        currentComponent =  this.state.open ? alterDialog : <Redirect to=\"/\"/>;\n\n        return (\n           <div>\n               {currentComponent}\n           </div>\n        );\n    }\n}\n\nexport default ResultDialogComponents;","import React from 'react';\nimport './App.css';\nimport InputCardComponent from \"./InputForm\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {useLocation} from \"react-router\";\nimport ResultDialogComponents from \"./ResultDialog\";\n\nfunction App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n                <Route exact path=\"/\" component={RouteComponents} />\n        </Router>\n    );\n}\n\n\n//to fetch the query param\nfunction useQuery() {\n    /**\n     * useLocation.hash used for #& as starting\n     * useLocation.search used for ? as starting\n     */\n    return new URLSearchParams(useLocation().hash);\n}\n\n\n//To route the components based on query params\nfunction RouteComponents() {\n    let queryParams = useQuery();\n    let accessToken = queryParams.get(\"access_token\");\n    let homeComponent = < InputCardComponent />;\n    if(accessToken != null)\n    {\n        homeComponent = <ResultDialogComponents accesstoken={accessToken}/>\n    }\n    return (\n        homeComponent\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}